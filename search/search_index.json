{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HC Vault Util \u00b6 hc-vault-util is a companion CLI tool for managing Hashicorp Vault. Features \u00b6 Vault transit backend import private key","title":"Home"},{"location":"#hc-vault-util","text":"hc-vault-util is a companion CLI tool for managing Hashicorp Vault.","title":"HC Vault Util"},{"location":"#features","text":"Vault transit backend import private key","title":"Features"},{"location":"changelog/","text":"Changelog \u00b6 Check the generated CHANGELOG.md from the Github repo","title":"Changelog"},{"location":"changelog/#changelog","text":"Check the generated CHANGELOG.md from the Github repo","title":"Changelog"},{"location":"install/","text":"Install \u00b6 You can find the pre-compiled binaries on the release page https://github.com/vdbulcke/hc-vault-util/releases Getting Latest Version \u00b6 TAG = $( curl https://api.github.com/repos/vdbulcke/hc-vault-util/releases/latest | jq .tag_name -r ) VERSION = $( echo $TAG | cut -d 'v' -f 2 ) Info You will need jq and curl in your PATH MacOS \u00b6 Intel ARM (M1) Universal Binary Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Darwin_x86_64.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Darwin_x86_64.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Darwin_amr64.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Darwin_amr64.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Darwin_all.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Darwin_all.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/ Linux \u00b6 Intel ARM Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Linux_x86_64.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Linux_x86_64.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Linux_amr64.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Linux_amr64.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/ Windows \u00b6 Intel Download the binary hc-vault-util_[VERSION]_Windows_x86_64.zip from the releases page Unzip the Binary Check Version: ./hc-vault-util.exe version","title":"Install"},{"location":"install/#install","text":"You can find the pre-compiled binaries on the release page https://github.com/vdbulcke/hc-vault-util/releases","title":"Install"},{"location":"install/#getting-latest-version","text":"TAG = $( curl https://api.github.com/repos/vdbulcke/hc-vault-util/releases/latest | jq .tag_name -r ) VERSION = $( echo $TAG | cut -d 'v' -f 2 ) Info You will need jq and curl in your PATH","title":"Getting Latest Version"},{"location":"install/#macos","text":"Intel ARM (M1) Universal Binary Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Darwin_x86_64.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Darwin_x86_64.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Darwin_amr64.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Darwin_amr64.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Darwin_all.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Darwin_all.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/","title":"MacOS"},{"location":"install/#linux","text":"Intel ARM Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Linux_x86_64.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Linux_x86_64.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/hc-vault-util/releases/download/ ${ TAG } /hc-vault-util_ ${ VERSION } _Linux_amr64.tar.gz\" Extract Binary: tar xzf \"hc-vault-util_ ${ VERSION } _Linux_amr64.tar.gz\" Check Version: ./hc-vault-util version Install in your PATH : sudo install hc-vault-util /usr/local/bin/ Or sudo mv hc-vault-util /usr/local/bin/","title":"Linux"},{"location":"install/#windows","text":"Intel Download the binary hc-vault-util_[VERSION]_Windows_x86_64.zip from the releases page Unzip the Binary Check Version: ./hc-vault-util.exe version","title":"Windows"},{"location":"contributing/contributing/","text":"Contributing \u00b6 Look at CONTRIBUTING.md at the root of the Github repo .","title":"Contributing"},{"location":"contributing/contributing/#contributing","text":"Look at CONTRIBUTING.md at the root of the Github repo .","title":"Contributing"},{"location":"contributing/git/","text":"Git \u00b6 Commit Pattern \u00b6 Commit message template: <type>: <subject> <BLANK LINE> <body> <BLANK LINE> <footer> Use the following type for your commit messages: docs: for commit related to documentation change feat: for commit related to a new feature, also add a reference to the Github issue in the subject fix: for commit related to a bug fix, also add a reference to the Github issue in the subject Use the following type for commits that should not appear in changelog or release note uses: test: for test typo: for fixing typo ignore: for everything else Breaking Change or Note \u00b6 Mention BREAKING CHANGE: or NOTE: in the footer . Use rebase before submitting Pull Request \u00b6 Make sure to rebase you commits (on your feature branch) first so that the git log follows the patterns mentioned above. git rebase -i","title":"Git"},{"location":"contributing/git/#git","text":"","title":"Git"},{"location":"contributing/git/#commit-pattern","text":"Commit message template: <type>: <subject> <BLANK LINE> <body> <BLANK LINE> <footer> Use the following type for your commit messages: docs: for commit related to documentation change feat: for commit related to a new feature, also add a reference to the Github issue in the subject fix: for commit related to a bug fix, also add a reference to the Github issue in the subject Use the following type for commits that should not appear in changelog or release note uses: test: for test typo: for fixing typo ignore: for everything else","title":"Commit Pattern"},{"location":"contributing/git/#breaking-change-or-note","text":"Mention BREAKING CHANGE: or NOTE: in the footer .","title":"Breaking Change or Note"},{"location":"contributing/git/#use-rebase-before-submitting-pull-request","text":"Make sure to rebase you commits (on your feature branch) first so that the git log follows the patterns mentioned above. git rebase -i","title":"Use rebase before submitting Pull Request"},{"location":"contributing/tooling/","text":"Tooling \u00b6 Release: goreleaser \u00b6 Goreleaser is used for building, packaging, and releasing new version of the software. Info See section \"Git\" for more details about git commit message Making Local Snapshot Build \u00b6 make build-snapshot Or goreleaser build --rm-dist --snapshot --single-target Testing Pre-release \u00b6 make release-skip-publish Or goreleaser release --rm-dist --skip-publish Vulnerability Scanning \u00b6 nancy is used for dependency scanning. make scan Linting \u00b6 golangci-lint is used for code linting. make lint Changelog Generator \u00b6 git-chglog is used for Changelog generation make changelog Info See section \"Git\" for more details about git commit message Documentation \u00b6 MkDocs is used for generating the documentation.","title":"Tooling"},{"location":"contributing/tooling/#tooling","text":"","title":"Tooling"},{"location":"contributing/tooling/#release-goreleaser","text":"Goreleaser is used for building, packaging, and releasing new version of the software. Info See section \"Git\" for more details about git commit message","title":"Release: goreleaser"},{"location":"contributing/tooling/#making-local-snapshot-build","text":"make build-snapshot Or goreleaser build --rm-dist --snapshot --single-target","title":"Making Local Snapshot Build"},{"location":"contributing/tooling/#testing-pre-release","text":"make release-skip-publish Or goreleaser release --rm-dist --skip-publish","title":"Testing Pre-release"},{"location":"contributing/tooling/#vulnerability-scanning","text":"nancy is used for dependency scanning. make scan","title":"Vulnerability Scanning"},{"location":"contributing/tooling/#linting","text":"golangci-lint is used for code linting. make lint","title":"Linting"},{"location":"contributing/tooling/#changelog-generator","text":"git-chglog is used for Changelog generation make changelog Info See section \"Git\" for more details about git commit message","title":"Changelog Generator"},{"location":"contributing/tooling/#documentation","text":"MkDocs is used for generating the documentation.","title":"Documentation"}]}